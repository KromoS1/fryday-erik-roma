{"version":3,"sources":["app/AppStyle.module.scss","reportWebVitals.ts","api/AuthAPI.ts","components/statusApp/StatusAppReducer.ts","components/profile/ProfileReducer.ts","components/login/LoginReducer.ts","components/registration/RegistrationReducer.ts","components/recoveryPassword/RecoveryPasswordReducer.ts","components/newPassword/NewPasswordReducer.ts","components/Packs/PacksReducer.ts","api/PackAPI.ts","components/Cards/CardsReducer.ts","api/CardsAPI.ts","app/Store.ts","components/error404/Error404.tsx","commonComponents/commonComponentsForm/FieldComponent.tsx","commonComponents/preloader/Preloader.tsx","components/registration/Registration.tsx","components/utils/Utils.tsx","components/login/Login.tsx","components/newPassword/NewPassword.tsx","components/recoveryPassword/RecoveryPassword.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","resources/images/checkEmail.jpg","components/chekEmail/ChekEmail.tsx","components/Routes.tsx","app/App.tsx","index.tsx","components/login/LoginStyle.module.scss","components/recoveryPassword/RecoveryPasswordStyle.module.scss","commonComponents/commonComponentsForm/FieldComponentStyle.module.scss","components/registration/RegistrationStyle.module.scss","components/newPassword/NewPasswordStyle.module.scss","components/chekEmail/ChekEmail.module.scss","commonComponents/preloader/Preloader.module.css"],"names":["module","exports","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","axiosInstance","axios","create","baseURL","withCredentials","authApi","params","post","delete","response","data","res","initialState","isInitialize","status","message","setStatusApp","type","payload","setUserData","userData","InitialState","_id","email","name","avatar","publicCardPacksCount","created","updated","isAdmin","rememberMe","verified","isAuth","setIsAuth","error","isSend","setPasswordStatus","setNewPasswordStatus","rootReducer","combineReducers","profile","state","action","login","registrationInfo","recovery","sendStatus","creatingPasswordInfo","statusApp","isInit","packs","user_id","filter","pack","cards","packId","store","createStore","applyMiddleware","thunk","Error404","React","memo","fieldComponent","placeholder","Item","className","style","field","rules","required","size","input","min","hasFeedback","Password","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","Preloader","s","preloader","preloader__image_animate","formItemLayout","labelCol","xs","span","sm","wrapperCol","FormRegistration","props","Form","useForm","form","registration","title","titleName","onFinish","values","onSubmit","buttons","btnReg","Registration","dispatch","useDispatch","useSelector","password","a","LoginForm","forgot","to","btnLogin","signUp","Login","loginParams","catch","finally","NewPasswordForm","newPasswordMain","btnSetPass","NewPasswordComponent","token","useParams","resetPasswordToken","FormRecoveryPassword","recoveryPassword","subtitle","btnSend","RecoveryPassword","useState","userEmail","setUserEmail","pathname","recoveryParams","from","Profile","onClick","logOut","ProfileContainer","info","ChekEmail","location","useLocation","chekMail","src","checkEmailImg","authIcon","alt","PATH","Routes","useEffect","me","path","exact","render","App","page","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b3f056f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"AppStyle_page__1eeP1\"};","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from 'axios';\r\nimport {ProfileType} from \"../components/profile/ProfileContainer\";\r\n\r\nexport type ResponseAuthType = ProfileType & {\r\n    token?: string\r\n    tokenDeathTime?: number\r\n}\r\n\r\nexport type ResponseErrorRegistrationType = {\r\n    error: string,\r\n    email: string\r\n}\r\n\r\nexport type ParamsAuthType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?:boolean\r\n}\r\n\r\nexport type ParamsForgotType = {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nexport type ResponseForgotType = {\r\n    info: string\r\n    error: string\r\n}\r\n\r\nexport type ParamsSetNewPasswordType = {\r\n    password: string\r\n    resetPasswordToken: string\r\n}\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:7542/2.0',\r\n    withCredentials: true,\r\n})\r\n\r\nexport const authApi = {\r\n    login(params: ParamsAuthType) {\r\n        return axiosInstance.post<ResponseAuthType>('/auth/login', {...params})\r\n    },\r\n    logout() {\r\n        return axiosInstance.delete<{ info: string }>('/auth/me')\r\n    },\r\n    registration(params: ParamsAuthType) {\r\n        return axiosInstance.post<ResponseAuthType | ResponseErrorRegistrationType>('/auth/register', {...params})\r\n            .then(response => response.data)\r\n    },\r\n    me(){\r\n        return axiosInstance.post('/auth/me')\r\n            .then(response => response.data);\r\n    },\r\n    forgot(params: ParamsForgotType) {\r\n        return axiosInstance.post<ResponseForgotType>('/auth/forgot', {...params})\r\n    },\r\n    setNewPassword(params: ParamsSetNewPasswordType) {\r\n       return axiosInstance.post<{info: string}>('/auth/set-new-password', params)\r\n           .then(res =>  res.data)\r\n    }\r\n};\r\n","export type StatusAppAT =\r\n    | ReturnType<typeof setIsInit>\r\n    | ReturnType<typeof setStatusApp>\r\n\r\nexport type Status = 'idle' | 'load' | 'success' | 'error'\r\n\r\nexport type StatusApp = {\r\n    isInitialize: boolean\r\n    status: Status\r\n    message:string\r\n}\r\n\r\nconst initialState: StatusApp = {\r\n    isInitialize: false,\r\n    status: 'idle',\r\n    message:'',\r\n}\r\n\r\nexport const setIsInit = (isInit: boolean) => ({type: 'STATUS-APP/SET_IS_INITIALIZE', isInit} as const);\r\nexport const setStatusApp = (status: Status,message:string) => ({type: 'STATUS-APP/SET-STATUS', payload:{status,message}} as const);\r\n\r\nexport const statusAppReducer = (state = initialState, action: StatusAppAT): StatusApp => {\r\n    switch (action.type) {\r\n        case 'STATUS-APP/SET_IS_INITIALIZE':\r\n            return {...state, isInitialize: action.isInit}\r\n        case 'STATUS-APP/SET-STATUS':\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {authApi} from '../../api/AuthAPI';\r\nimport {AppThunkType} from '../../app/Store';\r\nimport {setIsAuth} from '../login/LoginReducer';\r\nimport {setStatusApp} from \"../statusApp/StatusAppReducer\";\r\nimport {ProfileType} from \"./ProfileContainer\";\r\n\r\nexport type ProfileReducerAT =\r\n    | ReturnType<typeof setUserData>\r\n\r\nexport const setUserData = (userData: ProfileType) =>\r\n    ({type: 'PROFILE/SET_USER_DATA', payload: {...userData}} as const)\r\n\r\nconst InitialState: ProfileType = {\r\n    _id: '',\r\n    email: '',\r\n    name: '',\r\n    avatar: '',\r\n    publicCardPacksCount: 0,\r\n    created: '',\r\n    updated: '',\r\n    isAdmin: false,\r\n    rememberMe: false,\r\n    verified: true,\r\n}\r\n\r\nexport const profileReducer = (state = InitialState, action: ProfileReducerAT) => {\r\n    switch (action.type) {\r\n        case 'PROFILE/SET_USER_DATA':\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const meProfile = (): AppThunkType => async dispatch => {\r\n    dispatch(setStatusApp('load', ''));\r\n    try {\r\n        await authApi.me();\r\n        dispatch(setIsAuth(true));\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message));\r\n    } finally {\r\n        dispatch(setStatusApp('idle', ''));\r\n    }\r\n}\r\n\r\n","import {AppThunkType} from '../../app/Store';\r\nimport {authApi, ParamsAuthType} from '../../api/AuthAPI';\r\nimport {setUserData} from '../profile/ProfileReducer';\r\nimport {setIsInit, setStatusApp} from \"../statusApp/StatusAppReducer\";\r\n\r\nexport type LoginAT =\r\n    | ReturnType<typeof setIsAuth>\r\n\r\nexport type LoginType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst initialState: LoginType = {\r\n    isAuth: false,\r\n}\r\n\r\nexport const setIsAuth = (isAuth: boolean) => ({type: 'LOGIN/SET_IS_AUTH', isAuth} as const);\r\n\r\nexport const loginReducer = (state = initialState, action: LoginAT): LoginType => {\r\n    switch (action.type) {\r\n        case 'LOGIN/SET_IS_AUTH':\r\n            return {...state, isAuth: action.isAuth}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const loginAccount = (loginParams: ParamsAuthType): AppThunkType => dispatch => {\r\n    dispatch(setStatusApp('load',''));\r\n    authApi.login(loginParams)\r\n        .then(res => {\r\n            dispatch(setUserData(res.data));\r\n            dispatch(setIsAuth(true));\r\n            dispatch(setStatusApp('success','Success'))\r\n        })\r\n        .catch(error => {\r\n            dispatch(setStatusApp('error',error.message))\r\n        }).finally(() => {\r\n        dispatch(setStatusApp('idle',''));\r\n    })\r\n};\r\n\r\nexport const logoutAccount = (): AppThunkType => dispatch => {\r\n    authApi.logout()\r\n        .then(res => {\r\n            if (res.data.info) {\r\n                dispatch(setIsAuth(false));\r\n            }\r\n        })\r\n}\r\n\r\nexport const initializeApp = (): AppThunkType => async dispatch => {\r\n    try {\r\n        const me = await authApi.me();\r\n        if (me) {\r\n            dispatch(setUserData(me));\r\n            dispatch(setIsAuth(true));\r\n        }\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message));\r\n    } finally {\r\n        dispatch(setStatusApp('idle', ''));\r\n        dispatch(setIsInit(true));\r\n    }\r\n}","import {authApi, ParamsAuthType} from '../../api/AuthAPI';\r\nimport {AppThunkType} from '../../app/Store';\r\nimport {redirectLogin} from '../utils/Utils';\r\nimport {setStatusApp} from \"../statusApp/StatusAppReducer\";\r\n\r\nexport type RegistrationTypes = {\r\n    error: string | null\r\n}\r\n\r\nexport type RegistrationAT = ReturnType<typeof setIsRegistered>\r\n\r\nconst InitialState: RegistrationTypes = {\r\n    error: null\r\n}\r\n\r\nexport const setIsRegistered = (isRegistered: boolean, error: string | null) =>\r\n    ({type: 'REGISTRATION/GET_REGISTERED_REQUEST', error} as const);\r\n\r\nexport const registrationReducer = (state = InitialState, action: RegistrationAT): RegistrationTypes => {\r\n    switch (action.type) {\r\n        case \"REGISTRATION/GET_REGISTERED_REQUEST\": {\r\n            return {...state, error: action.error}\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const getRegistration = (params: ParamsAuthType): AppThunkType => async dispatch => {\r\n    dispatch(setStatusApp('load', ''));\r\n    try {\r\n        const response = await authApi.registration(params)\r\n        if (response) {\r\n            redirectLogin();\r\n        }\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message))\r\n        dispatch(setIsRegistered(false, error.message));\r\n    } finally {\r\n        dispatch(setStatusApp('idle', ''));\r\n    }\r\n}\r\n\r\n","import {AppThunkType} from \"../../app/Store\";\r\nimport {authApi, ParamsForgotType} from \"../../api/AuthAPI\";\r\nimport {setStatusApp} from \"../statusApp/StatusAppReducer\";\r\n\r\nexport type RecoveryPasswordType = {\r\n    isSend: boolean\r\n}\r\n\r\nconst InitialState: RecoveryPasswordType = {\r\n    isSend: false\r\n}\r\n\r\nexport type RecoveryPasswordAT =\r\n    | ReturnType<typeof setSendStatus>\r\n\r\nexport const setSendStatus = (sendStatus: boolean) => ({type: \"RECOVERY/SET_SEND_STATUS\", sendStatus} as const)\r\n\r\nexport const recoveryPasswordReducer = (state = InitialState, action: RecoveryPasswordAT): RecoveryPasswordType => {\r\n    switch (action.type) {\r\n        case \"RECOVERY/SET_SEND_STATUS\":\r\n            return {...state, isSend: action.sendStatus}\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const recoveryPassword = (recoveryParams: ParamsForgotType): AppThunkType => async dispatch => {\r\n    dispatch(setStatusApp('load', ''));\r\n    try {\r\n        await authApi.forgot(recoveryParams);\r\n        dispatch(setSendStatus(true));\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message));\r\n    } finally {\r\n        dispatch(setStatusApp('idle', ''));\r\n    }\r\n}","import {authApi, ParamsSetNewPasswordType} from \"../../api/AuthAPI\";\r\nimport {AppThunkType} from \"../../app/Store\";\r\nimport {setStatusApp} from \"../statusApp/StatusAppReducer\";\r\n\r\nexport type NewPasswordTypes = {\r\n    setPasswordStatus: boolean\r\n}\r\n\r\nexport type NewPasswordAT = ReturnType<typeof setNewPasswordStatus>\r\n\r\nconst initialState: NewPasswordTypes = {\r\n    setPasswordStatus: false\r\n}\r\n\r\nexport const setNewPasswordStatus = (status: boolean) => ({type: 'PASSWORD/SET_CHANGED_STATUS', status} as const)\r\n\r\nexport const newPasswordReducer = (state = initialState, action: NewPasswordAT): NewPasswordTypes => {\r\n    switch (action.type) {\r\n        case \"PASSWORD/SET_CHANGED_STATUS\":\r\n            return {...state, setPasswordStatus: action.status}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setNewPassword = (params: ParamsSetNewPasswordType): AppThunkType => async dispatch => {\r\n    dispatch(setStatusApp('load', ''));\r\n    try {\r\n        await authApi.setNewPassword(params);\r\n        dispatch(setNewPasswordStatus(true));\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message));\r\n        dispatch(setNewPasswordStatus(false));\r\n    } finally {\r\n        dispatch(setNewPasswordStatus(false));\r\n        dispatch(setStatusApp('idle', ''));\r\n    }\r\n}\r\n","import {AppThunkType} from \"../../app/Store\";\r\nimport {packApi, ParamsGetPacksType, ParamsUpdatePack} from \"../../api/PackAPI\";\r\nimport {setStatusApp} from \"../statusApp/StatusAppReducer\";\r\n\r\nexport type PackAT =\r\n    | ReturnType<typeof setPacks>\r\n\r\nexport type PackType = {\r\n    _id: string\r\n    name: string\r\n    cardsCount: number\r\n    updated: string\r\n    created: string\r\n    grade: number\r\n    more_id: string\r\n    path: string\r\n    private: boolean\r\n    rating: number\r\n    shots: number\r\n    type: string\r\n    user_id: string\r\n    user_name: string\r\n}\r\n\r\nconst initialState: PackType[] = [];\r\n\r\nexport const setPacks = (packs: PackType[], user_id?: string) => ({\r\n    type: 'PACKS/SET-PACKS',\r\n    packs,\r\n    user_id\r\n} as const);\r\n\r\nexport const PacksReducer = (state = initialState, action: PackAT): PackType[] => {\r\n    switch (action.type) {\r\n        case \"PACKS/SET-PACKS\":\r\n            if (action.user_id) {\r\n                return action.packs.filter(pack => pack.user_id === action.user_id);\r\n            }\r\n            return action.packs;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getPacks = (getParams: ParamsGetPacksType): AppThunkType => async dispatch => {\r\n    dispatch(setStatusApp('load', ''));\r\n    try {\r\n        const data = await packApi.getPacks(getParams);\r\n        dispatch(setPacks(data.cardPacks));\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message));\r\n    } finally {\r\n        dispatch(setStatusApp('idle', ''));\r\n    }\r\n}\r\n\r\nexport const addPack = (cardsPack: { name: string, private: boolean }): AppThunkType => async dispatch => {\r\n    dispatch(setStatusApp('load', ''));\r\n    try {\r\n        await packApi.addPack(cardsPack);\r\n        dispatch(getPacks({}));\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message));\r\n    } finally {\r\n        dispatch(setStatusApp('idle', ''));\r\n    }\r\n}\r\n\r\nexport const putPacks = (pack: ParamsUpdatePack): AppThunkType => async dispatch => {\r\n    dispatch(setStatusApp('load', ''));\r\n    try {\r\n        await packApi.updatePack(pack);\r\n        dispatch(getPacks({}));\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message));\r\n    } finally {\r\n        dispatch(setStatusApp('idle', ''));\r\n    }\r\n}\r\n\r\nexport const removePack = (id: string): AppThunkType => async dispatch => {\r\n    dispatch(setStatusApp('load', ''));\r\n    try {\r\n        await packApi.deletePack(id);\r\n        dispatch(getPacks({}));\r\n        dispatch(setStatusApp('success', 'Success'));\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message));\r\n    } finally {\r\n        dispatch(setStatusApp('idle', ''));\r\n    }\r\n}","import axios from 'axios';\r\nimport {PackType} from \"../components/Packs/PacksReducer\";\r\n\r\nexport type ParamsGetPacksType = {\r\n    user_id?: string\r\n    packName?: string\r\n    min?: number\r\n    max?: number\r\n    sortPacks?: string\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type ResponseGetPacks = {\r\n    cardPacks: PackType[]\r\n    cardPacksTotalCount: number\r\n    maxCardsCount: number\r\n    minCardsCount: number\r\n    page: number\r\n    pageCount: number\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nexport type ParamsUpdatePack = {\r\n    _id: string\r\n    deckCover?: string\r\n    name: string\r\n}\r\n\r\nexport type ResponsePacksType<D = PackType> = {\r\n    data: D\r\n    token: string\r\n    tokenDeathTime: number\r\n}\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:7542/2.0',\r\n    withCredentials: true,\r\n})\r\n\r\n\r\nexport const packApi = {\r\n    getPacks(getParams: ParamsGetPacksType) {\r\n        return axiosInstance.get<ResponseGetPacks>('/cards/pack', {\r\n            params: {...getParams}\r\n        }).then(response => response.data);\r\n    },\r\n    addPack(pack:{name:string,private:boolean}) {\r\n        return axiosInstance.post<ResponsePacksType<{newCardsPack: PackType}>>('/cards/pack', {\r\n            cardsPack:{\r\n                name:pack.name,\r\n                private:pack.private,\r\n            }\r\n        })\r\n    },\r\n    deletePack(id: string) {\r\n        return axiosInstance.delete<ResponsePacksType<{deletedCardsPack: PackType}>>(`/cards/pack?id=${id}`)\r\n    },\r\n    updatePack(putParams: ParamsUpdatePack) {\r\n        return axiosInstance.put<ResponsePacksType<{updatedCardsPack: PackType}>>('/cards/pack', {\r\n            cardsPack:{...putParams}\r\n        })\r\n    }\r\n}\r\n","import {CardRequestType, cardsApi, CardsType, GetCardsRequestType, UpdateCardType} from \"../../api/CardsAPI\";\r\nimport {AppThunkType} from \"../../app/Store\";\r\nimport {setStatusApp} from \"../statusApp/StatusAppReducer\";\r\n\r\nexport type CardAT = | ReturnType<typeof setCards>\r\n\r\nexport type CardsStateType = {\r\n    [key: string]: CardsType[]\r\n}\r\n\r\nconst initialState: CardsStateType = {}\r\n\r\nexport const setCards = (cards: CardsType[],packId:string) => ({type: \"CARDS/GET-CARDS\", cards,packId} as const);\r\n\r\nexport const CardsReducer = (state = initialState, action: CardAT): CardsStateType => {\r\n    switch (action.type) {\r\n        case \"CARDS/GET-CARDS\":\r\n            return {...state,[action.packId]: [...action.cards]}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const getCards = (params: GetCardsRequestType): AppThunkType => async dispatch => {\r\n    dispatch(setStatusApp('idle', ''));\r\n    try {\r\n        const cards = await cardsApi.getCards(params);\r\n        dispatch(setCards(cards,params.cardsPack_id));\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message));\r\n    } finally {\r\n        dispatch(setStatusApp('idle', ''));\r\n    }\r\n}\r\n\r\nexport const addCards = (card: CardRequestType,params: GetCardsRequestType): AppThunkType => async dispatch => {\r\n    dispatch(setStatusApp('idle', ''));\r\n    try {\r\n        await cardsApi.createCard(card);\r\n        dispatch(getCards(params));\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message));\r\n    } finally {\r\n        dispatch(setStatusApp('idle', ''));\r\n    }\r\n}\r\n\r\nexport const updateCards = (putCard: UpdateCardType,params: GetCardsRequestType): AppThunkType => async dispatch => {\r\n    dispatch(setStatusApp('idle', ''));\r\n    try {\r\n        await cardsApi.updateCard(putCard);\r\n        dispatch(getCards(params));\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message));\r\n    } finally {\r\n        dispatch(setStatusApp('idle', ''));\r\n    }\r\n}\r\n\r\nexport const deleteCards = (id: string,params: GetCardsRequestType): AppThunkType => async dispatch => {\r\n    dispatch(setStatusApp('idle', ''));\r\n    try {\r\n        await cardsApi.deleteCard(id);\r\n        dispatch(getCards(params));\r\n    } catch (error) {\r\n        dispatch(setStatusApp('error', error.message));\r\n    } finally {\r\n        dispatch(setStatusApp('idle', ''));\r\n    }\r\n}","import axios from \"axios\";\r\n\r\nexport type GetCardsRequestType = {\r\n    cardsPack_id: string\r\n    cardAnswer?: string\r\n    cardQuestion?: string\r\n    min?: number\r\n    max?: number\r\n    sortCard?: number\r\n    page?: number\r\n    pageCount?: number\r\n}\r\n\r\nexport type  CardsType = {\r\n    _id: string\r\n    cardsPack_id: string\r\n    user_id: string\r\n    type: string\r\n    answer: string\r\n    question: string\r\n    rating: number\r\n    shots: number\r\n    created: string\r\n    updated: string\r\n}\r\n\r\nexport type ResponseType = {\r\n    cards: CardsType[]\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\n\r\nexport type CardRequestType = {\r\n    cardsPack_id: string\r\n    type?: string\r\n    answer?: string\r\n    question?: string\r\n    grade?: number\r\n    shots?: number\r\n}\r\n\r\nexport type UpdateCardType = {\r\n    _id: string\r\n    question?: string\r\n    answer?: string\r\n    comments?: string\r\n}\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'http://localhost:7542/2.0',\r\n    withCredentials: true,\r\n})\r\n\r\nexport const cardsApi = {\r\n    getCards(params:GetCardsRequestType) {\r\n        return axiosInstance.get<ResponseType>('/cards/card',{\r\n            params:{...params}\r\n        }).then(response => response.data.cards);\r\n    },\r\n    createCard(card: CardRequestType) {\r\n        return axiosInstance.post('/cards/card', {card}).then(response => response.data);\r\n    },\r\n    updateCard(putCard: UpdateCardType) {\r\n        return axiosInstance.put('/cards/card',{putCard});\r\n    },\r\n    deleteCard(id: string) {\r\n        return axiosInstance.delete(`/cards/card?id=${id}`);\r\n    }\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {loginReducer, LoginAT} from \"../components/login/LoginReducer\";\r\nimport {registrationReducer, RegistrationAT} from \"../components/registration/RegistrationReducer\";\r\nimport {profileReducer, ProfileReducerAT} from \"../components/profile/ProfileReducer\";\r\nimport {recoveryPasswordReducer, RecoveryPasswordAT} from \"../components/recoveryPassword/RecoveryPasswordReducer\";\r\nimport {newPasswordReducer, NewPasswordAT} from \"../components/newPassword/NewPasswordReducer\";\r\nimport {StatusAppAT, statusAppReducer} from \"../components/statusApp/StatusAppReducer\";\r\nimport {PackAT, PacksReducer} from \"../components/Packs/PacksReducer\";\r\nimport {CardAT, CardsReducer} from \"../components/Cards/CardsReducer\";\r\n\r\n\r\nexport const rootReducer = combineReducers({\r\n    profile: profileReducer,\r\n    login: loginReducer,\r\n    registrationInfo: registrationReducer,\r\n    recovery: recoveryPasswordReducer,\r\n    creatingPasswordInfo: newPasswordReducer,\r\n    statusApp: statusAppReducer,\r\n    packs: PacksReducer,\r\n    cards: CardsReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport type AppActionsType =\r\n    | LoginAT\r\n    | RegistrationAT\r\n    | ProfileReducerAT\r\n    | RecoveryPasswordAT\r\n    | NewPasswordAT\r\n    | StatusAppAT\r\n    | PackAT\r\n    | CardAT\r\n\r\nexport type AppThunkType<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionsType>\r\n","import React from 'react'\r\n\r\n\r\nexport const Error404: React.FC = React.memo(() => {\r\n    return (\r\n        <>\r\n            <h1>404 Not found</h1>\r\n        </>\r\n    )\r\n})","import React from 'react'\r\nimport {Form, Input} from 'antd';\r\nimport style from './FieldComponentStyle.module.scss';\r\n\r\n\r\nexport const fieldComponent = (name: string, placeholder: string) => {\r\n    if (name === 'email') {\r\n        return <Form.Item\r\n            className={style.field}\r\n            name={name}\r\n            rules={[\r\n                {\r\n                    type: 'email',\r\n                    message: 'The input is not valid E-mail!',\r\n                },\r\n                {\r\n                    required: true,\r\n                    message: 'Please input your E-mail!',\r\n                },\r\n            ]}>\r\n            <Input placeholder={placeholder} size={'large'} className={style.input}/>\r\n        </Form.Item>\r\n    } else if (name === 'password') {\r\n        return <Form.Item\r\n            className={style.field}\r\n            name={name}\r\n            rules={[\r\n                {\r\n                    min: 8,\r\n                    message: \"Password should be more than 8 character\",\r\n                },\r\n                {\r\n                    required: true,\r\n                    message: 'Please input your password!',\r\n                },\r\n            ]}\r\n            hasFeedback\r\n        >\r\n            <Input.Password placeholder={placeholder} size={'large'} className={style.input}/>\r\n        </Form.Item>\r\n    } else if (name === 'confirm') {\r\n        return <Form.Item\r\n            className={style.field}\r\n            name={name}\r\n            dependencies={['password']}\r\n            hasFeedback\r\n            rules={[\r\n                {\r\n                    required: true,\r\n                    message: 'Please confirm your password!',\r\n                },\r\n                ({getFieldValue}) => ({\r\n                    validator(_, value) {\r\n                        if (!value || getFieldValue('password') === value) {\r\n                            return Promise.resolve();\r\n                        }\r\n\r\n                        return Promise.reject(new Error('The two passwords that you entered do not match!'));\r\n                    },\r\n                }),\r\n            ]}\r\n        >\r\n            <Input.Password placeholder={placeholder} size={'large'} className={style.input}/>\r\n        </Form.Item>\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport s from './Preloader.module.css'\r\n\r\nexport const Preloader = () => {\r\n    return(\r\n        <div className={s.preloader}>\r\n            <div className={s.preloader__image_animate}>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, {FC} from 'react';\r\nimport style from './RegistrationStyle.module.scss'\r\nimport {Form} from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport {fieldComponent} from '../../commonComponents/commonComponentsForm/FieldComponent';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {getRegistration} from \"./RegistrationReducer\";\r\nimport {AppRootStateType} from \"../../app/Store\";\r\nimport {Status} from \"../statusApp/StatusAppReducer\";\r\nimport {Preloader} from \"../../commonComponents/preloader/Preloader\";\r\n\r\ninterface ValuesType {\r\n    email: string\r\n    password: string\r\n    confirmPassword: string\r\n}\r\n\r\ntype PropsType = {\r\n    onSubmit: (data: ValuesType) => void\r\n}\r\n\r\n\r\nexport const formItemLayout = {\r\n    labelCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 24,\r\n        },\r\n    },\r\n    wrapperCol: {\r\n        xs: {\r\n            span: 24,\r\n        },\r\n        sm: {\r\n            span: 24,\r\n        },\r\n    },\r\n};\r\n\r\nexport const FormRegistration: FC<PropsType> = props => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const onFinish = (values: ValuesType) => {\r\n        props.onSubmit(values);\r\n    };\r\n\r\n    return (\r\n        <div className={style.registration}>\r\n            <div className={style.title}>Cards</div>\r\n            <div className={style.titleName}>\r\n                <h3>Sign Up</h3>\r\n            </div>\r\n            <Form name={'register'}\r\n                  className={style.form}\r\n                  {...formItemLayout}\r\n                  form={form}\r\n                  onFinish={onFinish}>\r\n                {fieldComponent('email', 'E-mail')}\r\n                {fieldComponent('password', 'Password')}\r\n                {fieldComponent('confirm', 'Confirm Password')}\r\n                <div className={style.buttons}>\r\n                    <button className={style.btnReg} type=\"submit\">\r\n                        Register\r\n                    </button>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Registration = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const statusApp = useSelector<AppRootStateType,Status>(state => state.statusApp.status);\r\n\r\n    if (statusApp === 'load') return <Preloader/>\r\n\r\n    const sendData = (data: ValuesType) => {\r\n        let {email,password} = data;\r\n        dispatch(getRegistration({email,password}))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FormRegistration onSubmit={sendData}/>\r\n        </>\r\n    )\r\n}","import {Redirect} from 'react-router-dom';\r\n\r\nexport const redirectLogin = () => {\r\n    return <Redirect to={\"/login\"}/>\r\n}\r\n\r\nexport const RecoveryMessage = () => {\r\n    return (\r\n        `<div>\r\n            <span>Follow the link to set a new password:</span>\r\n            <a href=\"https://kromos1.github.io/fryday-erik-roma-pasha/#/set-new-password/$token$\">click on the link to confirm your mail</a>\r\n        </div>`\r\n    )\r\n}\r\n","import React, {FC, memo} from 'react'\r\nimport {Form} from 'antd';\r\nimport style from './LoginStyle.module.scss';\r\nimport {fieldComponent} from '../../commonComponents/commonComponentsForm/FieldComponent';\r\nimport {formItemLayout} from '../registration/Registration';\r\nimport {NavLink, Redirect} from 'react-router-dom';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/Store';\r\nimport {loginAccount} from \"./LoginReducer\";\r\nimport {Status} from \"../statusApp/StatusAppReducer\";\r\nimport {Preloader} from \"../../commonComponents/preloader/Preloader\";\r\n\r\ninterface ValuesType {\r\n    email: string\r\n    password: string\r\n}\r\n\r\ntype PropsType = {\r\n    onSubmit: (data: ValuesType) => void\r\n}\r\n\r\nconst LoginForm: FC<PropsType> = props => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const onFinish = (values: ValuesType) => {\r\n       props.onSubmit(values);\r\n    };\r\n\r\n    return (\r\n        <div className={style.login}>\r\n            <div className={style.title}>Cards</div>\r\n            <div className={style.titleName}>\r\n                <h3>Sign In</h3>\r\n            </div>\r\n            <Form name={'login'}\r\n                  className={style.form}\r\n                  {...formItemLayout}\r\n                  form={form}\r\n                  onFinish={onFinish}>\r\n                {fieldComponent('email', 'E-mail')}\r\n                {fieldComponent('password', 'Password')}\r\n                <div className={style.forgot}>\r\n                    <span>\r\n                        <NavLink to={'/recovery-password'}>\r\n                            Forgot Password\r\n                        </NavLink>\r\n                    </span>\r\n                </div>\r\n                <div className={style.buttons}>\r\n                    <button className={style.btnLogin} type=\"submit\">\r\n                        Login\r\n                    </button>\r\n                </div>\r\n                <div className={style.signUp}>\r\n                    <span>Don't have an account?</span>\r\n                    <NavLink to={\"/registration\"}>Sign Up</NavLink>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport const Login: FC = memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n    const isAuth = useSelector<AppRootStateType,boolean>(state => state.login.isAuth);\r\n    const statusApp = useSelector<AppRootStateType,Status>(state => state.statusApp.status);\r\n\r\n    if (isAuth){\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    if (statusApp === 'load') return <Preloader/>\r\n\r\n    const submit = (data: ValuesType) => {\r\n        dispatch(loginAccount({...data,rememberMe:true}));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <LoginForm onSubmit={submit}/>\r\n        </>\r\n    )\r\n})","import React, {FC, memo} from 'react'\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {setNewPassword} from \"./NewPasswordReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/Store\";\r\nimport {Form} from \"antd\";\r\nimport style from './NewPasswordStyle.module.scss'\r\nimport {fieldComponent} from \"../../commonComponents/commonComponentsForm/FieldComponent\";\r\nimport {formItemLayout} from \"../registration/Registration\";\r\nimport {Status} from \"../statusApp/StatusAppReducer\";\r\nimport {Preloader} from \"../../commonComponents/preloader/Preloader\";\r\n\r\ninterface NewPasswordValuesType {\r\n    password: string\r\n    confirmPassword: string\r\n}\r\ntype NewPasswordFormPropsType = {\r\n    onSubmit: (data: NewPasswordValuesType) => void\r\n}\r\n\r\nexport const NewPasswordForm: FC<NewPasswordFormPropsType> = memo(({onSubmit}) => {\r\n    const [form] = Form.useForm();\r\n\r\n    const onFinish = (values: NewPasswordValuesType) => {\r\n       onSubmit(values);\r\n    };\r\n    return (\r\n        <div className={style.newPasswordMain}>\r\n            <div className={style.title}>Cards</div>\r\n            <div className={style.titleName}>\r\n                <h3>Create new password</h3>\r\n                {/*todo разобраться с размерами*/}\r\n            </div>\r\n            <Form name={'newPassword'}\r\n                  className={style.form}\r\n                  form={form}\r\n                  onFinish={onFinish}\r\n                  {...formItemLayout}\r\n            >\r\n                {fieldComponent('password', 'Password')}\r\n                {fieldComponent('confirm', 'Confirm Password')}\r\n                <div className={style.buttons}>\r\n                    <button className={style.btnSetPass} type=\"submit\">\r\n                        Create new password\r\n                    </button>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const NewPasswordComponent: FC = memo(() => {\r\n    const dispatch = useDispatch();\r\n    const { token } = useParams<{token: string}>();\r\n    const statusApp = useSelector<AppRootStateType,Status>(state => state.statusApp.status);\r\n    const changePasswordStatus = useSelector<AppRootStateType, boolean>(state => state.creatingPasswordInfo.setPasswordStatus);\r\n\r\n    if (changePasswordStatus) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    if (statusApp === 'load') return <Preloader/>\r\n\r\n    const submit = (data: NewPasswordValuesType) => {\r\n        let {password} = data;\r\n       dispatch(setNewPassword({password, resetPasswordToken: token}));\r\n    }\r\n    return (\r\n        <>\r\n            <NewPasswordForm onSubmit={submit}/>\r\n        </>\r\n    )\r\n})","import React, {FC, memo, useState} from 'react'\r\nimport {Form} from \"antd\";\r\nimport style from \".//RecoveryPasswordStyle.module.scss\";\r\nimport {fieldComponent} from \"../../commonComponents/commonComponentsForm/FieldComponent\";\r\nimport {formItemLayout} from \"../registration/Registration\";\r\nimport {NavLink, Redirect} from \"react-router-dom\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../app/Store\";\r\nimport {recoveryPassword} from \"./RecoveryPasswordReducer\";\r\nimport {RecoveryMessage} from \"../utils/Utils\";\r\nimport {Status} from \"../statusApp/StatusAppReducer\";\r\nimport {Preloader} from \"../../commonComponents/preloader/Preloader\";\r\n\r\ninterface ValuesType {\r\n    email: string\r\n}\r\n\r\ntype PropsType = {\r\n    onSubmit: (data: ValuesType) => void\r\n}\r\n\r\nexport const FormRecoveryPassword: FC<PropsType> = props => {\r\n\r\n    const [form] = Form.useForm();\r\n\r\n    const onFinish = (values: ValuesType) => {\r\n        props.onSubmit(values);\r\n    };\r\n\r\n    return (\r\n        <div className={style.recoveryPassword}>\r\n            <div className={style.title}>Cards</div>\r\n            <div className={style.titleName}>\r\n                <h3>Forgot your password?</h3>\r\n            </div>\r\n            <Form name={'forgot password'}\r\n                  className={style.form}\r\n                  {...formItemLayout}\r\n                  form={form}\r\n                  onFinish={onFinish}>\r\n                {fieldComponent('email', 'E-mail')}\r\n                <div className={style.subtitle}>\r\n                    Enter your email address and we will send you future instructions\r\n                </div>\r\n                <div className={style.buttons}>\r\n                    <button className={style.btnSend} type=\"submit\">\r\n                        Send Instructions\r\n                    </button>\r\n                </div>\r\n                <div className={style.signUp}>\r\n                    <span>Did you remember your password?</span>\r\n                    <NavLink to={\"/login\"}>Try logging in</NavLink>\r\n                </div>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const RecoveryPassword: FC = memo(() => {\r\n    const [userEmail, setUserEmail] = useState<string>('');\r\n    const isSend = useSelector<AppRootStateType, boolean>(state => state.recovery.isSend);\r\n    const statusApp = useSelector<AppRootStateType,Status>(state => state.statusApp.status);\r\n    const dispatch = useDispatch();\r\n\r\n    if (statusApp === 'load') return <Preloader/>\r\n\r\n    const sendData = (data: ValuesType) => {\r\n        setUserEmail(data.email);\r\n        dispatch(recoveryPassword({\r\n            email: data.email,\r\n            from: \"test-front-admin <ai73a@yandex.by>\",\r\n            message: RecoveryMessage()\r\n        }))\r\n    }\r\n\r\n    if(isSend){\r\n        return <Redirect\r\n            to={{\r\n                pathname: \"/chek-email\",\r\n                state: {userEmail}\r\n            }}\r\n        />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FormRecoveryPassword onSubmit={sendData}/>\r\n        </>\r\n    )\r\n})","import React, {FC} from 'react'\r\nimport {ProfileType} from \"./ProfileContainer\";\r\n\r\ntype PropsType = {\r\n    profile:ProfileType\r\n    logOut: () => void\r\n}\r\n\r\nexport const Profile:FC<PropsType> = props => {\r\n\r\n    let profile = '';\r\n    if (props.profile) {\r\n        profile = 'Hello user';\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>{profile}</div>\r\n            <div>\r\n                <button onClick={props.logOut}>Logout</button>\r\n            </div>\r\n        </>\r\n    )\r\n}","import React, {memo} from 'react'\r\nimport {Profile} from './Profile';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../app/Store';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {logoutAccount} from '../login/LoginReducer';\r\nimport {Status} from \"../statusApp/StatusAppReducer\";\r\nimport {Preloader} from \"../../commonComponents/preloader/Preloader\";\r\n\r\nexport type ProfileType = {\r\n    _id: string\r\n    email: string\r\n    rememberMe: boolean\r\n    isAdmin: boolean\r\n    name: string\r\n    verified: boolean\r\n    publicCardPacksCount: number\r\n    created: string\r\n    updated: string\r\n    avatar?: string\r\n}\r\n\r\nexport const ProfileContainer = memo(() => {\r\n    const dispatch = useDispatch();\r\n    const profile = useSelector<AppRootStateType,ProfileType>(state => state.profile);\r\n    const isAuth = useSelector<AppRootStateType,boolean>(state => state.login.isAuth);\r\n    const statusApp = useSelector<AppRootStateType,Status>(state => state.statusApp.status);\r\n\r\n    if (!isAuth){\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    if (statusApp === 'load') return <Preloader/>\r\n\r\n    const logOut = () => {\r\n        dispatch(logoutAccount());\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Profile profile={profile} logOut={logOut}/>\r\n        </>\r\n    )\r\n});\r\n","export default __webpack_public_path__ + \"static/media/checkEmail.37bcebbd.jpg\";","import React, {FC} from 'react';\r\nimport {useLocation} from \"react-router-dom\";\r\nimport style from './ChekEmail.module.scss'\r\nimport checkEmailImg from '../../resources/images/checkEmail.jpg';\r\n\r\nexport const ChekEmail: FC = () => {\r\n    const location = useLocation<{userEmail: string}>();\r\n    return <div className={style.chekMail}>\r\n        <div className={style.title}>Cards</div>\r\n        <img src={checkEmailImg} className={style.authIcon} alt={'Check your Email page'}/>\r\n        <div className={style.titleName}>\r\n            <h3>Check Email</h3>\r\n        </div>\r\n        <div className={style.subtitle}>\r\n            We've sent an Email with instructions to {location.state ? location.state.userEmail : ' your Email'}\r\n        </div>\r\n    </div>\r\n}","import React, {useEffect} from 'react'\r\nimport {Redirect, Route, Switch} from 'react-router-dom';\r\nimport {Error404} from './error404/Error404';\r\nimport {Login} from './login/Login';\r\nimport {Registration} from './registration/Registration';\r\nimport {NewPasswordComponent} from './newPassword/NewPassword';\r\nimport {RecoveryPassword} from './recoveryPassword/RecoveryPassword';\r\nimport {ProfileContainer} from './profile/ProfileContainer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../app/Store';\r\nimport {initializeApp} from './login/LoginReducer';\r\nimport {Preloader} from '../commonComponents/preloader/Preloader';\r\nimport {ChekEmail} from \"./chekEmail/ChekEmail\";\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    PROFILE: '/profile',\r\n    REGISTRATION: '/registration',\r\n    NEW_PASSWORD: '/set-new-password/:token?',\r\n    RECOVERY_PASSWORD: '/recovery-password',\r\n    CHEK_EMAIL: '/chek-email',\r\n    PACK: '/packs',\r\n    CARDS: '/cards',\r\n}\r\n\r\nexport const Routes = () => {\r\n    const dispatch = useDispatch();\r\n    const isInit = useSelector<AppRootStateType, boolean>(state => state.statusApp.isInitialize);\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeApp());\r\n    }, [dispatch])\r\n\r\n    if (!isInit) {\r\n        return <div><Preloader/></div>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route path={'/'} exact render={() => <Redirect to={PATH.PROFILE}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <Login/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <ProfileContainer/>}/>\r\n                <Route path={PATH.REGISTRATION} render={() => <Registration/>}/>\r\n                <Route path={PATH.NEW_PASSWORD} render={() => <NewPasswordComponent/>}/>\r\n                <Route path={PATH.RECOVERY_PASSWORD} render={() => <RecoveryPassword/>}/>\r\n                <Route path={PATH.CHEK_EMAIL} render={() => <ChekEmail/>}/>\r\n                {/*у этого роута нет пути, он отрисуется если пользователь захочет попасть на несуществующую страницу*/}\r\n                <Route render={() => <Error404/>}/>\r\n            </Switch>\r\n        </>\r\n    );\r\n};","import React from 'react';\r\nimport {Routes} from '../components/Routes';\r\nimport style from './AppStyle.module.scss';\r\n\r\nexport const App = () => {\r\n\r\n    return (\r\n        <div className={style.page}>\r\n            <Routes/>\r\n        </div>\r\n    )\r\n};\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./app/Store\";\r\nimport {HashRouter} from 'react-router-dom';\r\nimport {App} from \"./app/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <HashRouter>\r\n          <Provider store={store}>\r\n              <App />\r\n          </Provider>\r\n      </HashRouter>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"LoginStyle_login__37Vgh\",\"title\":\"LoginStyle_title__2mMcN\",\"titleName\":\"LoginStyle_titleName__OqHjZ\",\"form\":\"LoginStyle_form__13ckJ\",\"field\":\"LoginStyle_field__2gOYQ\",\"input\":\"LoginStyle_input__3leUN\",\"forgot\":\"LoginStyle_forgot__3BaTX\",\"buttons\":\"LoginStyle_buttons__1-7Y1\",\"btnLogin\":\"LoginStyle_btnLogin__1p5Mw\",\"signUp\":\"LoginStyle_signUp__DEF_E\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"recoveryPassword\":\"RecoveryPasswordStyle_recoveryPassword__xYhLm\",\"title\":\"RecoveryPasswordStyle_title__1ZuTd\",\"titleName\":\"RecoveryPasswordStyle_titleName__2Wqc2\",\"subtitle\":\"RecoveryPasswordStyle_subtitle__3dA2Y\",\"field\":\"RecoveryPasswordStyle_field__2XiRQ\",\"input\":\"RecoveryPasswordStyle_input__2EJH6\",\"buttons\":\"RecoveryPasswordStyle_buttons__1GTrv\",\"btnSend\":\"RecoveryPasswordStyle_btnSend__3z9XX\",\"signUp\":\"RecoveryPasswordStyle_signUp__3iakF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"field\":\"FieldComponentStyle_field__3wF6S\",\"input\":\"FieldComponentStyle_input__2LPri\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"registration\":\"RegistrationStyle_registration__3rCiu\",\"title\":\"RegistrationStyle_title__3RuSE\",\"titleName\":\"RegistrationStyle_titleName__26dRv\",\"form\":\"RegistrationStyle_form__TM67Y\",\"field\":\"RegistrationStyle_field__3SYzr\",\"input\":\"RegistrationStyle_input__2UZ9B\",\"buttons\":\"RegistrationStyle_buttons__3Ea0q\",\"btnCan\":\"RegistrationStyle_btnCan__nUHyo\",\"btnReg\":\"RegistrationStyle_btnReg__2aImk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"newPasswordMain\":\"NewPasswordStyle_newPasswordMain__58ssK\",\"title\":\"NewPasswordStyle_title__7zPVW\",\"titleName\":\"NewPasswordStyle_titleName__1TaD8\",\"form\":\"NewPasswordStyle_form__2S2Sz\",\"buttons\":\"NewPasswordStyle_buttons__3238X\",\"btnSetPass\":\"NewPasswordStyle_btnSetPass__2jTms\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chekMail\":\"ChekEmail_chekMail__1_Eee\",\"title\":\"ChekEmail_title__15mqp\",\"authIcon\":\"ChekEmail_authIcon__3-Jfw\",\"titleName\":\"ChekEmail_titleName__2hjUp\",\"subtitle\":\"ChekEmail_subtitle__1Htxc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__2uLk-\",\"preloader__image_animate\":\"Preloader_preloader__image_animate__3B3qF\",\"up-down\":\"Preloader_up-down__dJ4Q5\"};"],"sourceRoot":""}